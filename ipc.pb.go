// Code generated by protoc-gen-go.
// source: ipc/ipc.proto
// DO NOT EDIT!

/*
Package ipc is a generated protocol buffer package.

It is generated from these files:
	ipc/ipc.proto

It has these top-level messages:
	Wrapper
	Query
	Response
*/
package ipc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Type int32

const (
	Type_QUERY    Type = 0
	Type_RESPONSE Type = 1
)

var Type_name = map[int32]string{
	0: "QUERY",
	1: "RESPONSE",
}
var Type_value = map[string]int32{
	"QUERY":    0,
	"RESPONSE": 1,
}

func (x Type) String() string {
	return proto.EnumName(Type_name, int32(x))
}
func (Type) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Wrapper struct {
	Type     Type      `protobuf:"varint,1,opt,name=type,enum=ipc.Type" json:"type,omitempty"`
	Port32   uint32    `protobuf:"varint,2,opt,name=port32" json:"port32,omitempty"`
	Id       uint32    `protobuf:"varint,3,opt,name=id" json:"id,omitempty"`
	Query    *Query    `protobuf:"bytes,4,opt,name=query" json:"query,omitempty"`
	Response *Response `protobuf:"bytes,5,opt,name=response" json:"response,omitempty"`
}

func (m *Wrapper) Reset()                    { *m = Wrapper{} }
func (m *Wrapper) String() string            { return proto.CompactTextString(m) }
func (*Wrapper) ProtoMessage()               {}
func (*Wrapper) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Wrapper) GetType() Type {
	if m != nil {
		return m.Type
	}
	return Type_QUERY
}

func (m *Wrapper) GetPort32() uint32 {
	if m != nil {
		return m.Port32
	}
	return 0
}

func (m *Wrapper) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Wrapper) GetQuery() *Query {
	if m != nil {
		return m.Query
	}
	return nil
}

func (m *Wrapper) GetResponse() *Response {
	if m != nil {
		return m.Response
	}
	return nil
}

type Query struct {
	Type string `protobuf:"bytes,1,opt,name=type" json:"type,omitempty"`
	Body []byte `protobuf:"bytes,2,opt,name=body,proto3" json:"body,omitempty"`
}

func (m *Query) Reset()                    { *m = Query{} }
func (m *Query) String() string            { return proto.CompactTextString(m) }
func (*Query) ProtoMessage()               {}
func (*Query) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Query) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Query) GetBody() []byte {
	if m != nil {
		return m.Body
	}
	return nil
}

type Response struct {
	Body []byte `protobuf:"bytes,1,opt,name=body,proto3" json:"body,omitempty"`
}

func (m *Response) Reset()                    { *m = Response{} }
func (m *Response) String() string            { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()               {}
func (*Response) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Response) GetBody() []byte {
	if m != nil {
		return m.Body
	}
	return nil
}

func init() {
	proto.RegisterType((*Wrapper)(nil), "ipc.Wrapper")
	proto.RegisterType((*Query)(nil), "ipc.Query")
	proto.RegisterType((*Response)(nil), "ipc.Response")
	proto.RegisterEnum("ipc.Type", Type_name, Type_value)
}

func init() { proto.RegisterFile("ipc/ipc.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 230 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x90, 0xb1, 0x4e, 0xc3, 0x30,
	0x10, 0x86, 0x71, 0x9a, 0x94, 0xe4, 0x68, 0xaa, 0xea, 0x06, 0xe4, 0x05, 0xb0, 0x32, 0x05, 0x86,
	0x56, 0x4a, 0x9f, 0x21, 0x2b, 0xd0, 0x2b, 0x08, 0x31, 0xd2, 0xc4, 0x83, 0x17, 0x7c, 0xb8, 0x61,
	0xf0, 0xc3, 0xf0, 0xae, 0x28, 0x47, 0x28, 0x6c, 0xf6, 0xf7, 0xfd, 0x3e, 0xfd, 0x3e, 0x28, 0x1d,
	0x77, 0x1b, 0xc7, 0xdd, 0x9a, 0x83, 0x1f, 0x3c, 0xce, 0x1c, 0x77, 0xd5, 0x97, 0x82, 0xf3, 0x97,
	0xf0, 0xc6, 0x6c, 0x03, 0x5e, 0x41, 0x3a, 0x44, 0xb6, 0x5a, 0x19, 0x55, 0x2f, 0x9b, 0x62, 0x3d,
	0x46, 0x9f, 0x22, 0x5b, 0x12, 0x8c, 0x97, 0x30, 0x67, 0x1f, 0x86, 0x6d, 0xa3, 0x13, 0xa3, 0xea,
	0x92, 0xa6, 0x1b, 0x2e, 0x21, 0x71, 0xbd, 0x9e, 0x09, 0x4b, 0x5c, 0x8f, 0x06, 0xb2, 0x8f, 0x4f,
	0x1b, 0xa2, 0x4e, 0x8d, 0xaa, 0x2f, 0x1a, 0x90, 0x39, 0xbb, 0x91, 0xd0, 0x8f, 0xc0, 0x5b, 0xc8,
	0x83, 0x3d, 0xb2, 0x7f, 0x3f, 0x5a, 0x9d, 0x49, 0xa8, 0x94, 0x10, 0x4d, 0x90, 0x4e, 0xba, 0xda,
	0x40, 0x26, 0x4f, 0x11, 0xff, 0x95, 0x2b, 0xa6, 0x46, 0x08, 0xe9, 0xc1, 0xf7, 0x51, 0xfa, 0x2c,
	0x48, 0xce, 0xd5, 0x35, 0xe4, 0xbf, 0x63, 0x4e, 0x5e, 0xfd, 0xf9, 0xbb, 0x1b, 0x48, 0xc7, 0x3f,
	0x61, 0x01, 0xd9, 0xee, 0xb9, 0xa5, 0xd7, 0xd5, 0x19, 0x2e, 0x20, 0xa7, 0x76, 0xff, 0xf8, 0x70,
	0xbf, 0x6f, 0x57, 0xea, 0x30, 0x97, 0xed, 0x6c, 0xbf, 0x03, 0x00, 0x00, 0xff, 0xff, 0xfc, 0xf0,
	0x02, 0x2f, 0x2e, 0x01, 0x00, 0x00,
}
